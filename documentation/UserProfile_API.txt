# UserProfile API Documentation

## Base URL
All endpoints are accessible via the base URL:
```
http://yourdomain.com/api
```

## Endpoints

### 1. Register a New User or Company

**Endpoint:** `/register`

**Method:** `POST`

**Description:** Registers a new user or company.

**Request Body:**
```json
{
  "first_name": "John",       // Required if role is 'user'
  "last_name": "Doe",         // Required if role is 'user'
  "name": "Company Inc.",     // Required if role is 'company'
  "email": "john@example.com",// Required
  "password": "password123",  // Required
  "password_confirmation": "password123", // Required
  "role": "user"              // Required, can be 'user' or 'company'
}
```

**Responses:**
- `201 Created`:
  ```json
  {
    "user": {
      "id": "1",
      "first_name": "John",
      "last_name": "Doe",
      "email": "john@example.com",
      "role_id": "1"
    }
  }
  ```
- `400 Bad Request`: Validation errors.

### 2. Log In User or Company

**Endpoint:** `/login`

**Method:** `POST`

**Description:** Logs in a user or company.

**Request Body:**
```json
{
  "email": "john@example.com",// Required
  "password": "password123",  // Required
  "role": "user"              // Required, can be 'user' or 'company'
}
```

**Responses:**
- `200 OK`:
  ```json
  {
    "token": "your_access_token"
  }
  ```
- `400 Bad Request`: Validation errors.
- `401 Unauthorized`: Invalid credentials.

### 3. Log Out User or Company

**Endpoint:** `/logout`

**Method:** `POST`

**Description:** Logs out a user or company.

**Headers:**
- `Authorization: Bearer your_access_token`

**Responses:**
- `200 OK`:
  ```json
  {
    "message": "Successfully logged out"
  }
  ```
- `500 Internal Server Error`: Failed to log out.

### 4. Get User or Company Profile

**Endpoint:** `/profile/{id}`

**Method:** `GET`

**Description:** Retrieves the profile of a user or company by ID.

**Parameters:**
- `id`: The ID of the user or company.

**Responses:**
- `200 OK`:
  ```json
  {
    "user": {
      "id": "1",
      "first_name": "John",
      "last_name": "Doe",
      "email": "john@example.com"
    }
  }
  ```
  or
  ```json
  {
    "company": {
      "id": "1",
      "name": "Company Inc.",
      "email": "info@company.com"
    }
  }
  ```
- `404 Not Found`: Profile not found.

### 5. Update User or Company Profile

**Endpoint:** `/profile/{id}`

**Method:** `PUT`

**Description:** Updates the profile of a user or company by ID.

**Parameters:**
- `id`: The ID of the user or company.

**Request Body:**
```json
{
  "first_name": "John",       // Optional for user
  "last_name": "Doe",         // Optional for user
  "name": "Company Inc."      // Optional for company
  // Add more fields as necessary
}
```

**Responses:**
- `200 OK`:
  ```json
  {
    "user": {
      "id": "1",
      "first_name": "John",
      "last_name": "Doe",
      "email": "john@example.com"
    }
  }
  ```
  or
  ```json
  {
    "company": {
      "id": "1",
      "name": "Company Inc.",
      "email": "info@company.com"
    }
  }
  ```
- `400 Bad Request`: Validation errors.
- `404 Not Found`: Profile not found.
- `500 Internal Server Error`: Failed to update profile.

### 6. Add Contact Information to User or Company Profile

**Endpoint:** `/profile/{id}/contact`

**Method:** `POST`

**Description:** Adds contact information to the profile of a user or company by ID.

**Parameters:**
- `id`: The ID of the user or company.

**Request Body:**
```json
{
  "email": "newemail@example.com", // Optional
  "phone": "+1234567890"           // Optional
  // Add more contact fields as necessary
}
```

**Responses:**
- `200 OK`:
  ```json
  {
    "user": {
      "id": "1",
      "email": "newemail@example.com",
      "phone": "+1234567890"
    }
  }
  ```
  or
  ```json
  {
    "company": {
      "id": "1",
      "email": "newemail@example.com",
      "phone": "+1234567890"
    }
  }
  ```
- `400 Bad Request`: Validation errors.
- `404 Not Found`: Profile not found.
- `500 Internal Server Error`: Failed to update contact information.

## Notes

- Ensure to replace `{id}` with the actual ID of the user or company in the endpoints.
- The `Authorization` header with a valid Bearer token is required for all endpoints 
  except `POST /register` and `POST /login`.
- Use the `role` field to differentiate between user and company operations where applicable.
